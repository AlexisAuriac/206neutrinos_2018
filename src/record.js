// Generated by CoffeeScript 2.4.1
(function() {
  var Record, isUint, rmsFromMeanAndStddev;

  isUint = require("./utility.js").isUint;

  rmsFromMeanAndStddev = function(u, sd) {
    return Math.sqrt(u ** 2 + sd ** 2);
  };

  module.exports = Record = class Record {
    constructor(n = 0, a = 0, h = 0, sd = 0, rms) {
      this.n = n;
      this.a = a;
      this.h = h;
      this.sd = sd;
      this.rms = 0;
      if (rms !== void 0) {
        this.rms = rms;
      } else {
        this.rms = rmsFromMeanAndStddev(a, sd);
      }
    }

    copy() {
      return new Record(...Object.values(this));
    }

    toString(r) {
      return `\tNumber of values:	${this.n}\n\tStandard deviation	${this.sd.toFixed(2)}\n\tArithmetic mean:	${this.a.toFixed(2)}\n\tRoot mean square:	${this.rms.toFixed(2)}\n\tHarmonic mean:		${this.h.toFixed(2)}\n`;
    }

    updateArithmeticMean(old, val) {
      return this.a = old.a + (val - old.a) / this.n;
    }

    updateRMS(old, val) {
      return this.rms = Math.sqrt((old.n * old.rms ** 2 + val ** 2) / this.n);
    }

    updateStandardDeviation(old, val) {
      return this.sd = Math.sqrt(this.rms ** 2 - this.a ** 2);
    }

    updateHarmonicMean(old, val) {
      return this.h = (old.n + 1) / (old.n / old.h + 1 / val);
    }

    update(line) {
      var old, val;
      old = this.copy();
      ++this.n;
      if (!isUint(line)) {
        console.error(`${line}: Invalid value`);
        process.exit(84);
      }
      val = Number(line);
      this.updateArithmeticMean(old, val);
      this.updateRMS(old, val);
      this.updateStandardDeviation(old, val);
      return this.updateHarmonicMean(old, val);
    }

  };

}).call(this);
